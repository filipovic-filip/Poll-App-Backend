// Code generated by ent, DO NOT EDIT.

package polloption

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the polloption type in the database.
	Label = "poll_option"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldVoteCount holds the string denoting the vote_count field in the database.
	FieldVoteCount = "vote_count"
	// EdgeUsersVoted holds the string denoting the users_voted edge name in mutations.
	EdgeUsersVoted = "users_voted"
	// EdgePoll holds the string denoting the poll edge name in mutations.
	EdgePoll = "poll"
	// Table holds the table name of the polloption in the database.
	Table = "poll_options"
	// UsersVotedTable is the table that holds the users_voted relation/edge. The primary key declared below.
	UsersVotedTable = "poll_option_users_voted"
	// UsersVotedInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersVotedInverseTable = "users"
	// PollTable is the table that holds the poll relation/edge.
	PollTable = "poll_options"
	// PollInverseTable is the table name for the Poll entity.
	// It exists in this package in order to avoid circular dependency with the "poll" package.
	PollInverseTable = "polls"
	// PollColumn is the table column denoting the poll relation/edge.
	PollColumn = "poll_poll_options"
)

// Columns holds all SQL columns for polloption fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldVoteCount,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "poll_options"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"poll_poll_options",
}

var (
	// UsersVotedPrimaryKey and UsersVotedColumn2 are the table columns denoting the
	// primary key for the users_voted relation (M2M).
	UsersVotedPrimaryKey = []string{"poll_option_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the PollOption queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByVoteCount orders the results by the vote_count field.
func ByVoteCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVoteCount, opts...).ToFunc()
}

// ByUsersVotedCount orders the results by users_voted count.
func ByUsersVotedCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUsersVotedStep(), opts...)
	}
}

// ByUsersVoted orders the results by users_voted terms.
func ByUsersVoted(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersVotedStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPollField orders the results by poll field.
func ByPollField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPollStep(), sql.OrderByField(field, opts...))
	}
}
func newUsersVotedStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersVotedInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, UsersVotedTable, UsersVotedPrimaryKey...),
	)
}
func newPollStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PollInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PollTable, PollColumn),
	)
}
