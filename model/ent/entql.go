// Code generated by ent, DO NOT EDIT.

package ent

import (
	"filip.filipovic/polling-app/model/ent/poll"
	"filip.filipovic/polling-app/model/ent/polloption"
	"filip.filipovic/polling-app/model/ent/predicate"
	"filip.filipovic/polling-app/model/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 3)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   poll.Table,
			Columns: poll.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: poll.FieldID,
			},
		},
		Type: "Poll",
		Fields: map[string]*sqlgraph.FieldSpec{
			poll.FieldName:        {Type: field.TypeString, Column: poll.FieldName},
			poll.FieldDescription: {Type: field.TypeString, Column: poll.FieldDescription},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   polloption.Table,
			Columns: polloption.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: polloption.FieldID,
			},
		},
		Type: "PollOption",
		Fields: map[string]*sqlgraph.FieldSpec{
			polloption.FieldName:      {Type: field.TypeString, Column: polloption.FieldName},
			polloption.FieldVoteCount: {Type: field.TypeInt, Column: polloption.FieldVoteCount},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldFirstName: {Type: field.TypeString, Column: user.FieldFirstName},
			user.FieldLastName:  {Type: field.TypeString, Column: user.FieldLastName},
			user.FieldUsername:  {Type: field.TypeString, Column: user.FieldUsername},
			user.FieldPassword:  {Type: field.TypeString, Column: user.FieldPassword},
		},
	}
	graph.MustAddE(
		"poll_options",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.PollOptionsTable,
			Columns: []string{poll.PollOptionsColumn},
			Bidi:    false,
		},
		"Poll",
		"PollOption",
	)
	graph.MustAddE(
		"created_by",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   poll.CreatedByTable,
			Columns: []string{poll.CreatedByColumn},
			Bidi:    false,
		},
		"Poll",
		"User",
	)
	graph.MustAddE(
		"users_voted",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   polloption.UsersVotedTable,
			Columns: polloption.UsersVotedPrimaryKey,
			Bidi:    false,
		},
		"PollOption",
		"User",
	)
	graph.MustAddE(
		"poll",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   polloption.PollTable,
			Columns: []string{polloption.PollColumn},
			Bidi:    false,
		},
		"PollOption",
		"Poll",
	)
	graph.MustAddE(
		"created_polls",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedPollsTable,
			Columns: []string{user.CreatedPollsColumn},
			Bidi:    false,
		},
		"User",
		"Poll",
	)
	graph.MustAddE(
		"votes",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.VotesTable,
			Columns: user.VotesPrimaryKey,
			Bidi:    false,
		},
		"User",
		"PollOption",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (pq *PollQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PollQuery builder.
func (pq *PollQuery) Filter() *PollFilter {
	return &PollFilter{config: pq.config, predicateAdder: pq}
}

// addPredicate implements the predicateAdder interface.
func (m *PollMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PollMutation builder.
func (m *PollMutation) Filter() *PollFilter {
	return &PollFilter{config: m.config, predicateAdder: m}
}

// PollFilter provides a generic filtering capability at runtime for PollQuery.
type PollFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PollFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *PollFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(poll.FieldID))
}

// WhereName applies the entql string predicate on the name field.
func (f *PollFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(poll.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *PollFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(poll.FieldDescription))
}

// WhereHasPollOptions applies a predicate to check if query has an edge poll_options.
func (f *PollFilter) WhereHasPollOptions() {
	f.Where(entql.HasEdge("poll_options"))
}

// WhereHasPollOptionsWith applies a predicate to check if query has an edge poll_options with a given conditions (other predicates).
func (f *PollFilter) WhereHasPollOptionsWith(preds ...predicate.PollOption) {
	f.Where(entql.HasEdgeWith("poll_options", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCreatedBy applies a predicate to check if query has an edge created_by.
func (f *PollFilter) WhereHasCreatedBy() {
	f.Where(entql.HasEdge("created_by"))
}

// WhereHasCreatedByWith applies a predicate to check if query has an edge created_by with a given conditions (other predicates).
func (f *PollFilter) WhereHasCreatedByWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("created_by", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (poq *PollOptionQuery) addPredicate(pred func(s *sql.Selector)) {
	poq.predicates = append(poq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PollOptionQuery builder.
func (poq *PollOptionQuery) Filter() *PollOptionFilter {
	return &PollOptionFilter{config: poq.config, predicateAdder: poq}
}

// addPredicate implements the predicateAdder interface.
func (m *PollOptionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PollOptionMutation builder.
func (m *PollOptionMutation) Filter() *PollOptionFilter {
	return &PollOptionFilter{config: m.config, predicateAdder: m}
}

// PollOptionFilter provides a generic filtering capability at runtime for PollOptionQuery.
type PollOptionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PollOptionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *PollOptionFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(polloption.FieldID))
}

// WhereName applies the entql string predicate on the name field.
func (f *PollOptionFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(polloption.FieldName))
}

// WhereVoteCount applies the entql int predicate on the vote_count field.
func (f *PollOptionFilter) WhereVoteCount(p entql.IntP) {
	f.Where(p.Field(polloption.FieldVoteCount))
}

// WhereHasUsersVoted applies a predicate to check if query has an edge users_voted.
func (f *PollOptionFilter) WhereHasUsersVoted() {
	f.Where(entql.HasEdge("users_voted"))
}

// WhereHasUsersVotedWith applies a predicate to check if query has an edge users_voted with a given conditions (other predicates).
func (f *PollOptionFilter) WhereHasUsersVotedWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("users_voted", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPoll applies a predicate to check if query has an edge poll.
func (f *PollOptionFilter) WhereHasPoll() {
	f.Where(entql.HasEdge("poll"))
}

// WhereHasPollWith applies a predicate to check if query has an edge poll with a given conditions (other predicates).
func (f *PollOptionFilter) WhereHasPollWith(preds ...predicate.Poll) {
	f.Where(entql.HasEdgeWith("poll", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (uq *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	uq.predicates = append(uq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (uq *UserQuery) Filter() *UserFilter {
	return &UserFilter{config: uq.config, predicateAdder: uq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{config: m.config, predicateAdder: m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *UserFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(user.FieldID))
}

// WhereFirstName applies the entql string predicate on the first_name field.
func (f *UserFilter) WhereFirstName(p entql.StringP) {
	f.Where(p.Field(user.FieldFirstName))
}

// WhereLastName applies the entql string predicate on the last_name field.
func (f *UserFilter) WhereLastName(p entql.StringP) {
	f.Where(p.Field(user.FieldLastName))
}

// WhereUsername applies the entql string predicate on the username field.
func (f *UserFilter) WhereUsername(p entql.StringP) {
	f.Where(p.Field(user.FieldUsername))
}

// WherePassword applies the entql string predicate on the password field.
func (f *UserFilter) WherePassword(p entql.StringP) {
	f.Where(p.Field(user.FieldPassword))
}

// WhereHasCreatedPolls applies a predicate to check if query has an edge created_polls.
func (f *UserFilter) WhereHasCreatedPolls() {
	f.Where(entql.HasEdge("created_polls"))
}

// WhereHasCreatedPollsWith applies a predicate to check if query has an edge created_polls with a given conditions (other predicates).
func (f *UserFilter) WhereHasCreatedPollsWith(preds ...predicate.Poll) {
	f.Where(entql.HasEdgeWith("created_polls", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasVotes applies a predicate to check if query has an edge votes.
func (f *UserFilter) WhereHasVotes() {
	f.Where(entql.HasEdge("votes"))
}

// WhereHasVotesWith applies a predicate to check if query has an edge votes with a given conditions (other predicates).
func (f *UserFilter) WhereHasVotesWith(preds ...predicate.PollOption) {
	f.Where(entql.HasEdgeWith("votes", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
