// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"filip.filipovic/polling-app/model/ent/poll"
	"filip.filipovic/polling-app/model/ent/polloption"
	"filip.filipovic/polling-app/model/ent/predicate"
	"filip.filipovic/polling-app/model/ent/user"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypePoll       = "Poll"
	TypePollOption = "PollOption"
	TypeUser       = "User"
)

// PollMutation represents an operation that mutates the Poll nodes in the graph.
type PollMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	name                *string
	description         *string
	clearedFields       map[string]struct{}
	poll_options        map[int]struct{}
	removedpoll_options map[int]struct{}
	clearedpoll_options bool
	created_by          *int
	clearedcreated_by   bool
	done                bool
	oldValue            func(context.Context) (*Poll, error)
	predicates          []predicate.Poll
}

var _ ent.Mutation = (*PollMutation)(nil)

// pollOption allows management of the mutation configuration using functional options.
type pollOption func(*PollMutation)

// newPollMutation creates new mutation for the Poll entity.
func newPollMutation(c config, op Op, opts ...pollOption) *PollMutation {
	m := &PollMutation{
		config:        c,
		op:            op,
		typ:           TypePoll,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPollID sets the ID field of the mutation.
func withPollID(id int) pollOption {
	return func(m *PollMutation) {
		var (
			err   error
			once  sync.Once
			value *Poll
		)
		m.oldValue = func(ctx context.Context) (*Poll, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Poll.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPoll sets the old Poll of the mutation.
func withPoll(node *Poll) pollOption {
	return func(m *PollMutation) {
		m.oldValue = func(context.Context) (*Poll, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PollMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PollMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PollMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PollMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Poll.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *PollMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PollMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Poll entity.
// If the Poll object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PollMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PollMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *PollMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *PollMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Poll entity.
// If the Poll object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PollMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *PollMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[poll.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *PollMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[poll.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *PollMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, poll.FieldDescription)
}

// AddPollOptionIDs adds the "poll_options" edge to the PollOption entity by ids.
func (m *PollMutation) AddPollOptionIDs(ids ...int) {
	if m.poll_options == nil {
		m.poll_options = make(map[int]struct{})
	}
	for i := range ids {
		m.poll_options[ids[i]] = struct{}{}
	}
}

// ClearPollOptions clears the "poll_options" edge to the PollOption entity.
func (m *PollMutation) ClearPollOptions() {
	m.clearedpoll_options = true
}

// PollOptionsCleared reports if the "poll_options" edge to the PollOption entity was cleared.
func (m *PollMutation) PollOptionsCleared() bool {
	return m.clearedpoll_options
}

// RemovePollOptionIDs removes the "poll_options" edge to the PollOption entity by IDs.
func (m *PollMutation) RemovePollOptionIDs(ids ...int) {
	if m.removedpoll_options == nil {
		m.removedpoll_options = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.poll_options, ids[i])
		m.removedpoll_options[ids[i]] = struct{}{}
	}
}

// RemovedPollOptions returns the removed IDs of the "poll_options" edge to the PollOption entity.
func (m *PollMutation) RemovedPollOptionsIDs() (ids []int) {
	for id := range m.removedpoll_options {
		ids = append(ids, id)
	}
	return
}

// PollOptionsIDs returns the "poll_options" edge IDs in the mutation.
func (m *PollMutation) PollOptionsIDs() (ids []int) {
	for id := range m.poll_options {
		ids = append(ids, id)
	}
	return
}

// ResetPollOptions resets all changes to the "poll_options" edge.
func (m *PollMutation) ResetPollOptions() {
	m.poll_options = nil
	m.clearedpoll_options = false
	m.removedpoll_options = nil
}

// SetCreatedByID sets the "created_by" edge to the User entity by id.
func (m *PollMutation) SetCreatedByID(id int) {
	m.created_by = &id
}

// ClearCreatedBy clears the "created_by" edge to the User entity.
func (m *PollMutation) ClearCreatedBy() {
	m.clearedcreated_by = true
}

// CreatedByCleared reports if the "created_by" edge to the User entity was cleared.
func (m *PollMutation) CreatedByCleared() bool {
	return m.clearedcreated_by
}

// CreatedByID returns the "created_by" edge ID in the mutation.
func (m *PollMutation) CreatedByID() (id int, exists bool) {
	if m.created_by != nil {
		return *m.created_by, true
	}
	return
}

// CreatedByIDs returns the "created_by" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CreatedByID instead. It exists only for internal usage by the builders.
func (m *PollMutation) CreatedByIDs() (ids []int) {
	if id := m.created_by; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCreatedBy resets all changes to the "created_by" edge.
func (m *PollMutation) ResetCreatedBy() {
	m.created_by = nil
	m.clearedcreated_by = false
}

// Where appends a list predicates to the PollMutation builder.
func (m *PollMutation) Where(ps ...predicate.Poll) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PollMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PollMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Poll, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PollMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PollMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Poll).
func (m *PollMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PollMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, poll.FieldName)
	}
	if m.description != nil {
		fields = append(fields, poll.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PollMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case poll.FieldName:
		return m.Name()
	case poll.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PollMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case poll.FieldName:
		return m.OldName(ctx)
	case poll.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown Poll field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PollMutation) SetField(name string, value ent.Value) error {
	switch name {
	case poll.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case poll.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown Poll field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PollMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PollMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PollMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Poll numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PollMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(poll.FieldDescription) {
		fields = append(fields, poll.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PollMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PollMutation) ClearField(name string) error {
	switch name {
	case poll.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Poll nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PollMutation) ResetField(name string) error {
	switch name {
	case poll.FieldName:
		m.ResetName()
		return nil
	case poll.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown Poll field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PollMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.poll_options != nil {
		edges = append(edges, poll.EdgePollOptions)
	}
	if m.created_by != nil {
		edges = append(edges, poll.EdgeCreatedBy)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PollMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case poll.EdgePollOptions:
		ids := make([]ent.Value, 0, len(m.poll_options))
		for id := range m.poll_options {
			ids = append(ids, id)
		}
		return ids
	case poll.EdgeCreatedBy:
		if id := m.created_by; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PollMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedpoll_options != nil {
		edges = append(edges, poll.EdgePollOptions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PollMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case poll.EdgePollOptions:
		ids := make([]ent.Value, 0, len(m.removedpoll_options))
		for id := range m.removedpoll_options {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PollMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedpoll_options {
		edges = append(edges, poll.EdgePollOptions)
	}
	if m.clearedcreated_by {
		edges = append(edges, poll.EdgeCreatedBy)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PollMutation) EdgeCleared(name string) bool {
	switch name {
	case poll.EdgePollOptions:
		return m.clearedpoll_options
	case poll.EdgeCreatedBy:
		return m.clearedcreated_by
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PollMutation) ClearEdge(name string) error {
	switch name {
	case poll.EdgeCreatedBy:
		m.ClearCreatedBy()
		return nil
	}
	return fmt.Errorf("unknown Poll unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PollMutation) ResetEdge(name string) error {
	switch name {
	case poll.EdgePollOptions:
		m.ResetPollOptions()
		return nil
	case poll.EdgeCreatedBy:
		m.ResetCreatedBy()
		return nil
	}
	return fmt.Errorf("unknown Poll edge %s", name)
}

// PollOptionMutation represents an operation that mutates the PollOption nodes in the graph.
type PollOptionMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	name               *string
	vote_count         *int
	addvote_count      *int
	clearedFields      map[string]struct{}
	users_voted        map[int]struct{}
	removedusers_voted map[int]struct{}
	clearedusers_voted bool
	poll               *int
	clearedpoll        bool
	done               bool
	oldValue           func(context.Context) (*PollOption, error)
	predicates         []predicate.PollOption
}

var _ ent.Mutation = (*PollOptionMutation)(nil)

// polloptionOption allows management of the mutation configuration using functional options.
type polloptionOption func(*PollOptionMutation)

// newPollOptionMutation creates new mutation for the PollOption entity.
func newPollOptionMutation(c config, op Op, opts ...polloptionOption) *PollOptionMutation {
	m := &PollOptionMutation{
		config:        c,
		op:            op,
		typ:           TypePollOption,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPollOptionID sets the ID field of the mutation.
func withPollOptionID(id int) polloptionOption {
	return func(m *PollOptionMutation) {
		var (
			err   error
			once  sync.Once
			value *PollOption
		)
		m.oldValue = func(ctx context.Context) (*PollOption, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PollOption.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPollOption sets the old PollOption of the mutation.
func withPollOption(node *PollOption) polloptionOption {
	return func(m *PollOptionMutation) {
		m.oldValue = func(context.Context) (*PollOption, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PollOptionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PollOptionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PollOptionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PollOptionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PollOption.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *PollOptionMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PollOptionMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the PollOption entity.
// If the PollOption object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PollOptionMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PollOptionMutation) ResetName() {
	m.name = nil
}

// SetVoteCount sets the "vote_count" field.
func (m *PollOptionMutation) SetVoteCount(i int) {
	m.vote_count = &i
	m.addvote_count = nil
}

// VoteCount returns the value of the "vote_count" field in the mutation.
func (m *PollOptionMutation) VoteCount() (r int, exists bool) {
	v := m.vote_count
	if v == nil {
		return
	}
	return *v, true
}

// OldVoteCount returns the old "vote_count" field's value of the PollOption entity.
// If the PollOption object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PollOptionMutation) OldVoteCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVoteCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVoteCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVoteCount: %w", err)
	}
	return oldValue.VoteCount, nil
}

// AddVoteCount adds i to the "vote_count" field.
func (m *PollOptionMutation) AddVoteCount(i int) {
	if m.addvote_count != nil {
		*m.addvote_count += i
	} else {
		m.addvote_count = &i
	}
}

// AddedVoteCount returns the value that was added to the "vote_count" field in this mutation.
func (m *PollOptionMutation) AddedVoteCount() (r int, exists bool) {
	v := m.addvote_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetVoteCount resets all changes to the "vote_count" field.
func (m *PollOptionMutation) ResetVoteCount() {
	m.vote_count = nil
	m.addvote_count = nil
}

// AddUsersVotedIDs adds the "users_voted" edge to the User entity by ids.
func (m *PollOptionMutation) AddUsersVotedIDs(ids ...int) {
	if m.users_voted == nil {
		m.users_voted = make(map[int]struct{})
	}
	for i := range ids {
		m.users_voted[ids[i]] = struct{}{}
	}
}

// ClearUsersVoted clears the "users_voted" edge to the User entity.
func (m *PollOptionMutation) ClearUsersVoted() {
	m.clearedusers_voted = true
}

// UsersVotedCleared reports if the "users_voted" edge to the User entity was cleared.
func (m *PollOptionMutation) UsersVotedCleared() bool {
	return m.clearedusers_voted
}

// RemoveUsersVotedIDs removes the "users_voted" edge to the User entity by IDs.
func (m *PollOptionMutation) RemoveUsersVotedIDs(ids ...int) {
	if m.removedusers_voted == nil {
		m.removedusers_voted = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.users_voted, ids[i])
		m.removedusers_voted[ids[i]] = struct{}{}
	}
}

// RemovedUsersVoted returns the removed IDs of the "users_voted" edge to the User entity.
func (m *PollOptionMutation) RemovedUsersVotedIDs() (ids []int) {
	for id := range m.removedusers_voted {
		ids = append(ids, id)
	}
	return
}

// UsersVotedIDs returns the "users_voted" edge IDs in the mutation.
func (m *PollOptionMutation) UsersVotedIDs() (ids []int) {
	for id := range m.users_voted {
		ids = append(ids, id)
	}
	return
}

// ResetUsersVoted resets all changes to the "users_voted" edge.
func (m *PollOptionMutation) ResetUsersVoted() {
	m.users_voted = nil
	m.clearedusers_voted = false
	m.removedusers_voted = nil
}

// SetPollID sets the "poll" edge to the Poll entity by id.
func (m *PollOptionMutation) SetPollID(id int) {
	m.poll = &id
}

// ClearPoll clears the "poll" edge to the Poll entity.
func (m *PollOptionMutation) ClearPoll() {
	m.clearedpoll = true
}

// PollCleared reports if the "poll" edge to the Poll entity was cleared.
func (m *PollOptionMutation) PollCleared() bool {
	return m.clearedpoll
}

// PollID returns the "poll" edge ID in the mutation.
func (m *PollOptionMutation) PollID() (id int, exists bool) {
	if m.poll != nil {
		return *m.poll, true
	}
	return
}

// PollIDs returns the "poll" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PollID instead. It exists only for internal usage by the builders.
func (m *PollOptionMutation) PollIDs() (ids []int) {
	if id := m.poll; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPoll resets all changes to the "poll" edge.
func (m *PollOptionMutation) ResetPoll() {
	m.poll = nil
	m.clearedpoll = false
}

// Where appends a list predicates to the PollOptionMutation builder.
func (m *PollOptionMutation) Where(ps ...predicate.PollOption) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PollOptionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PollOptionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PollOption, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PollOptionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PollOptionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PollOption).
func (m *PollOptionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PollOptionMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, polloption.FieldName)
	}
	if m.vote_count != nil {
		fields = append(fields, polloption.FieldVoteCount)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PollOptionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case polloption.FieldName:
		return m.Name()
	case polloption.FieldVoteCount:
		return m.VoteCount()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PollOptionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case polloption.FieldName:
		return m.OldName(ctx)
	case polloption.FieldVoteCount:
		return m.OldVoteCount(ctx)
	}
	return nil, fmt.Errorf("unknown PollOption field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PollOptionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case polloption.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case polloption.FieldVoteCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVoteCount(v)
		return nil
	}
	return fmt.Errorf("unknown PollOption field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PollOptionMutation) AddedFields() []string {
	var fields []string
	if m.addvote_count != nil {
		fields = append(fields, polloption.FieldVoteCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PollOptionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case polloption.FieldVoteCount:
		return m.AddedVoteCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PollOptionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case polloption.FieldVoteCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVoteCount(v)
		return nil
	}
	return fmt.Errorf("unknown PollOption numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PollOptionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PollOptionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PollOptionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown PollOption nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PollOptionMutation) ResetField(name string) error {
	switch name {
	case polloption.FieldName:
		m.ResetName()
		return nil
	case polloption.FieldVoteCount:
		m.ResetVoteCount()
		return nil
	}
	return fmt.Errorf("unknown PollOption field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PollOptionMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.users_voted != nil {
		edges = append(edges, polloption.EdgeUsersVoted)
	}
	if m.poll != nil {
		edges = append(edges, polloption.EdgePoll)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PollOptionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case polloption.EdgeUsersVoted:
		ids := make([]ent.Value, 0, len(m.users_voted))
		for id := range m.users_voted {
			ids = append(ids, id)
		}
		return ids
	case polloption.EdgePoll:
		if id := m.poll; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PollOptionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedusers_voted != nil {
		edges = append(edges, polloption.EdgeUsersVoted)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PollOptionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case polloption.EdgeUsersVoted:
		ids := make([]ent.Value, 0, len(m.removedusers_voted))
		for id := range m.removedusers_voted {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PollOptionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedusers_voted {
		edges = append(edges, polloption.EdgeUsersVoted)
	}
	if m.clearedpoll {
		edges = append(edges, polloption.EdgePoll)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PollOptionMutation) EdgeCleared(name string) bool {
	switch name {
	case polloption.EdgeUsersVoted:
		return m.clearedusers_voted
	case polloption.EdgePoll:
		return m.clearedpoll
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PollOptionMutation) ClearEdge(name string) error {
	switch name {
	case polloption.EdgePoll:
		m.ClearPoll()
		return nil
	}
	return fmt.Errorf("unknown PollOption unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PollOptionMutation) ResetEdge(name string) error {
	switch name {
	case polloption.EdgeUsersVoted:
		m.ResetUsersVoted()
		return nil
	case polloption.EdgePoll:
		m.ResetPoll()
		return nil
	}
	return fmt.Errorf("unknown PollOption edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	first_name           *string
	last_name            *string
	username             *string
	password             *string
	clearedFields        map[string]struct{}
	created_polls        map[int]struct{}
	removedcreated_polls map[int]struct{}
	clearedcreated_polls bool
	votes                map[int]struct{}
	removedvotes         map[int]struct{}
	clearedvotes         bool
	done                 bool
	oldValue             func(context.Context) (*User, error)
	predicates           []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFirstName sets the "first_name" field.
func (m *UserMutation) SetFirstName(s string) {
	m.first_name = &s
}

// FirstName returns the value of the "first_name" field in the mutation.
func (m *UserMutation) FirstName() (r string, exists bool) {
	v := m.first_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstName returns the old "first_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFirstName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstName: %w", err)
	}
	return oldValue.FirstName, nil
}

// ResetFirstName resets all changes to the "first_name" field.
func (m *UserMutation) ResetFirstName() {
	m.first_name = nil
}

// SetLastName sets the "last_name" field.
func (m *UserMutation) SetLastName(s string) {
	m.last_name = &s
}

// LastName returns the value of the "last_name" field in the mutation.
func (m *UserMutation) LastName() (r string, exists bool) {
	v := m.last_name
	if v == nil {
		return
	}
	return *v, true
}

// OldLastName returns the old "last_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLastName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}
	return oldValue.LastName, nil
}

// ResetLastName resets all changes to the "last_name" field.
func (m *UserMutation) ResetLastName() {
	m.last_name = nil
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// AddCreatedPollIDs adds the "created_polls" edge to the Poll entity by ids.
func (m *UserMutation) AddCreatedPollIDs(ids ...int) {
	if m.created_polls == nil {
		m.created_polls = make(map[int]struct{})
	}
	for i := range ids {
		m.created_polls[ids[i]] = struct{}{}
	}
}

// ClearCreatedPolls clears the "created_polls" edge to the Poll entity.
func (m *UserMutation) ClearCreatedPolls() {
	m.clearedcreated_polls = true
}

// CreatedPollsCleared reports if the "created_polls" edge to the Poll entity was cleared.
func (m *UserMutation) CreatedPollsCleared() bool {
	return m.clearedcreated_polls
}

// RemoveCreatedPollIDs removes the "created_polls" edge to the Poll entity by IDs.
func (m *UserMutation) RemoveCreatedPollIDs(ids ...int) {
	if m.removedcreated_polls == nil {
		m.removedcreated_polls = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.created_polls, ids[i])
		m.removedcreated_polls[ids[i]] = struct{}{}
	}
}

// RemovedCreatedPolls returns the removed IDs of the "created_polls" edge to the Poll entity.
func (m *UserMutation) RemovedCreatedPollsIDs() (ids []int) {
	for id := range m.removedcreated_polls {
		ids = append(ids, id)
	}
	return
}

// CreatedPollsIDs returns the "created_polls" edge IDs in the mutation.
func (m *UserMutation) CreatedPollsIDs() (ids []int) {
	for id := range m.created_polls {
		ids = append(ids, id)
	}
	return
}

// ResetCreatedPolls resets all changes to the "created_polls" edge.
func (m *UserMutation) ResetCreatedPolls() {
	m.created_polls = nil
	m.clearedcreated_polls = false
	m.removedcreated_polls = nil
}

// AddVoteIDs adds the "votes" edge to the PollOption entity by ids.
func (m *UserMutation) AddVoteIDs(ids ...int) {
	if m.votes == nil {
		m.votes = make(map[int]struct{})
	}
	for i := range ids {
		m.votes[ids[i]] = struct{}{}
	}
}

// ClearVotes clears the "votes" edge to the PollOption entity.
func (m *UserMutation) ClearVotes() {
	m.clearedvotes = true
}

// VotesCleared reports if the "votes" edge to the PollOption entity was cleared.
func (m *UserMutation) VotesCleared() bool {
	return m.clearedvotes
}

// RemoveVoteIDs removes the "votes" edge to the PollOption entity by IDs.
func (m *UserMutation) RemoveVoteIDs(ids ...int) {
	if m.removedvotes == nil {
		m.removedvotes = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.votes, ids[i])
		m.removedvotes[ids[i]] = struct{}{}
	}
}

// RemovedVotes returns the removed IDs of the "votes" edge to the PollOption entity.
func (m *UserMutation) RemovedVotesIDs() (ids []int) {
	for id := range m.removedvotes {
		ids = append(ids, id)
	}
	return
}

// VotesIDs returns the "votes" edge IDs in the mutation.
func (m *UserMutation) VotesIDs() (ids []int) {
	for id := range m.votes {
		ids = append(ids, id)
	}
	return
}

// ResetVotes resets all changes to the "votes" edge.
func (m *UserMutation) ResetVotes() {
	m.votes = nil
	m.clearedvotes = false
	m.removedvotes = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.first_name != nil {
		fields = append(fields, user.FieldFirstName)
	}
	if m.last_name != nil {
		fields = append(fields, user.FieldLastName)
	}
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldFirstName:
		return m.FirstName()
	case user.FieldLastName:
		return m.LastName()
	case user.FieldUsername:
		return m.Username()
	case user.FieldPassword:
		return m.Password()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldFirstName:
		return m.OldFirstName(ctx)
	case user.FieldLastName:
		return m.OldLastName(ctx)
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstName(v)
		return nil
	case user.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastName(v)
		return nil
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldFirstName:
		m.ResetFirstName()
		return nil
	case user.FieldLastName:
		m.ResetLastName()
		return nil
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.created_polls != nil {
		edges = append(edges, user.EdgeCreatedPolls)
	}
	if m.votes != nil {
		edges = append(edges, user.EdgeVotes)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeCreatedPolls:
		ids := make([]ent.Value, 0, len(m.created_polls))
		for id := range m.created_polls {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeVotes:
		ids := make([]ent.Value, 0, len(m.votes))
		for id := range m.votes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedcreated_polls != nil {
		edges = append(edges, user.EdgeCreatedPolls)
	}
	if m.removedvotes != nil {
		edges = append(edges, user.EdgeVotes)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeCreatedPolls:
		ids := make([]ent.Value, 0, len(m.removedcreated_polls))
		for id := range m.removedcreated_polls {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeVotes:
		ids := make([]ent.Value, 0, len(m.removedvotes))
		for id := range m.removedvotes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedcreated_polls {
		edges = append(edges, user.EdgeCreatedPolls)
	}
	if m.clearedvotes {
		edges = append(edges, user.EdgeVotes)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeCreatedPolls:
		return m.clearedcreated_polls
	case user.EdgeVotes:
		return m.clearedvotes
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeCreatedPolls:
		m.ResetCreatedPolls()
		return nil
	case user.EdgeVotes:
		m.ResetVotes()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
